#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <SDL2/SDL_image.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>
#include "tinyfiledialogs.h"
#include "accessoire.h"
#include "ajouter_vêtement.h"
#include "crea_bar.h"

Vetement vetements[MAX_VETEMENTS];
int vetement_count = 0;

// Fonction pour copier une image
bool copy_image_to_folder(const char *src, const char *dest_folder, char *dest_path) {
    const char *filename = strrchr(src, '/');
    if (!filename) filename = src;
    else filename++;

    snprintf(dest_path, 200, "%s/%s", dest_folder, filename);

    FILE *src_file = fopen(src, "rb");
    if (!src_file) return false;

    FILE *dest_file = fopen(dest_path, "wb");
    if (!dest_file) {
        fclose(src_file);
        return false;
    }

    char buffer[4096];
    size_t bytes;
    while ((bytes = fread(buffer, 1, sizeof(buffer), src_file)) > 0) {
        fwrite(buffer, 1, bytes, dest_file);
    }

    fclose(src_file);
    fclose(dest_file);
    return true;
}

// Fonction pour rendre un champ avec son nom (au-dessus du champ, sauf pour "Importer une image")
void render_field(SDL_Renderer *renderer, TTF_Font *font, InputField *field) {
    SDL_SetRenderDrawColor(renderer, field->color.r, field->color.g, field->color.b, 255);
    SDL_RenderFillRect(renderer, &field->rect);

    SDL_Color textColor = {0, 0, 0, 255}; // Texte en noir
    SDL_Surface *titleSurface = TTF_RenderText_Solid(font, field->title, textColor);
    SDL_Texture *titleTexture = SDL_CreateTextureFromSurface(renderer, titleSurface);

    // Affichage du titre au-dessus du champ de saisie (centré)
    SDL_Rect titleRect = {field->rect.x + (field->rect.w - titleSurface->w) / 2, field->rect.y - 30, titleSurface->w, titleSurface->h};
    SDL_RenderCopy(renderer, titleTexture, NULL, &titleRect);

    SDL_FreeSurface(titleSurface);
    SDL_DestroyTexture(titleTexture);

    if (strlen(field->input) > 0) {
        SDL_Surface *inputSurface = TTF_RenderText_Solid(font, field->input, textColor);
        SDL_Texture *inputTexture = SDL_CreateTextureFromSurface(renderer, inputSurface);

        // Affichage du texte saisi à l'intérieur du champ
        SDL_Rect inputRect = {field->rect.x + 10, field->rect.y + 10, inputSurface->w, inputSurface->h};
        SDL_RenderCopy(renderer, inputTexture, NULL, &inputRect);

        SDL_FreeSurface(inputSurface);
        SDL_DestroyTexture(inputTexture);
    }
}

// Fonction pour afficher le texte sur les boutons
void render_button(SDL_Renderer *renderer, TTF_Font *font, SDL_Rect *buttonRect, const char *text) {
    SDL_SetRenderDrawColor(renderer, 75, 0, 130, 255); // Couleur pour les boutons (violet)
    SDL_RenderFillRect(renderer, buttonRect);

    SDL_Color textColor = {255, 255, 255, 255}; // Texte en blanc
    SDL_Surface *textSurface = TTF_RenderText_Solid(font, text, textColor);
    SDL_Texture *textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);

    // Centrer le texte dans le bouton
    SDL_Rect textRect = {buttonRect->x + (buttonRect->w - textSurface->w) / 2, buttonRect->y + (buttonRect->h - textSurface->h) / 2, textSurface->w, textSurface->h};
    SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

    SDL_FreeSurface(textSurface);
    SDL_DestroyTexture(textTexture);
}

// Fonction principale pour ajouter un vêtement
void ajouter_vetement(SDL_Renderer *renderer, TTF_Font *font) {
    SDL_Color white = {255, 255, 255, 255};
    const char *img_folder = "img";
    mkdir(img_folder, 0777);

    InputField fields[7] = {
        {{W_WIDTH / 2 - F_WIDTH / 2, 100, F_WIDTH, F_HEIGHT}, "Nom", "", {138, 43, 226, 255}, false},
        {{W_WIDTH / 2 - F_WIDTH / 2, 160, F_WIDTH, F_HEIGHT}, "Categorie", "", {138, 43, 226, 255}, false},
        {{W_WIDTH / 2 - F_WIDTH / 2, 220, F_WIDTH, F_HEIGHT}, "Temperature", "", {138, 43, 226, 255}, false},
        {{W_WIDTH / 2 - F_WIDTH / 2, 280, F_WIDTH, F_HEIGHT}, "Motif", "", {138, 43, 226, 255}, false},
        {{W_WIDTH / 2 - F_WIDTH / 2, 340, F_WIDTH, F_HEIGHT}, "Type", "", {138, 43, 226, 255}, false},
        {{W_WIDTH / 2 - F_WIDTH / 2, 400, F_WIDTH, F_HEIGHT}, "Couleur", "", {138, 43, 226, 255}, false},
        {{W_WIDTH / 2 - F_WIDTH / 2, 460, F_WIDTH, F_HEIGHT}, "Saison", "", {138, 43, 226, 255}, false}
    };

    SDL_Rect buttonValiderRect = {W_WIDTH / 2 - B_WIDTH / 2,580, B_WIDTH, B_HEIGHT};
    SDL_Rect buttonImageRect = {W_WIDTH / 2 - B_WIDTH / 2, 520, B_WIDTH,B_HEIGHT };
    //SDL_Rect buttonRetourRect = {W_WIDTH / 2 - B_WIDTH / 2, 640, B_WIDTH, B_HEIGHT};
    char image_path[200] = "";

    Vetement newVetement = {0};
    SDL_Event event;
    bool running = true;

    while (running) {
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                running = false;
            } else if (event.type == SDL_MOUSEBUTTONDOWN) {
                int x = event.button.x;
                int y = event.button.y;

                // Activation des champs de saisie
                for (int i = 0; i < 7; i++) {
                    fields[i].active = SDL_PointInRect(&(SDL_Point){x, y}, &fields[i].rect);
                    fields[i].color = fields[i].active ? (SDL_Color){75, 0, 130, 255} : (SDL_Color){138, 43, 226, 255};
                }

                // Bouton "Valider"
                if (SDL_PointInRect(&(SDL_Point){x, y}, &buttonValiderRect)) {
                    strcpy(newVetement.nom, fields[0].input);
                    strcpy(newVetement.categorie, fields[1].input);
                    strcpy(newVetement.temperature, fields[2].input);
                    strcpy(newVetement.motif, fields[3].input);
                    strcpy(newVetement.type, fields[4].input);
                    strcpy(newVetement.couleur, fields[5].input);
                    strcpy(newVetement.saison, fields[6].input);
                    strcpy(newVetement.image_path, image_path);

                   // Ajouter le vêtement au tableau
                    if (vetement_count < MAX_VETEMENTS) {
                        vetements[vetement_count++] = newVetement;
                        printf("Vêtement ajouté: %s, Total: %d vêtements\n", newVetement.nom, vetement_count);
                    } else {
                        printf("Impossible d'ajouter le vêtement. Tableau plein.\n");
    }
                    running = false; // Terminer le processus d'ajout du vêtement
                }

                // Bouton "Importer une image"
                if (SDL_PointInRect(&(SDL_Point){x, y}, &buttonImageRect)) {
                    const char *file_path = tinyfd_openFileDialog("Choisissez une image", "", 0, NULL, NULL, 0);
                    if (file_path && copy_image_to_folder(file_path, img_folder, image_path)) {
                        printf("Image importée : %s\n", image_path);
                    }
                }

                // Bouton "Retour" : Revenir en arrière
                if (x >= 0 && x <= 800 && y >= 0 && y <= 50) {
                    running = false; // Ferme l'écran sans ajouter de vêtement
                }
            } else if (event.type == SDL_TEXTINPUT) {
                for (int i = 0; i < 7; i++) {
                    if (fields[i].active) {
                        strncat(fields[i].input, event.text.text, sizeof(fields[i].input) - strlen(fields[i].input) - 1);
                    }
                }
            } else if (event.type == SDL_KEYDOWN && event.key.keysym.sym == SDLK_BACKSPACE) {
                for (int i = 0; i < 7; i++) {
                    if (fields[i].active && strlen(fields[i].input) > 0) {
                        fields[i].input[strlen(fields[i].input) - 1] = '\0';
                    }
                }
            }
        }

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);
        // Affichage de la barre de recherche
        render_crea_bar(renderer, font, W_WIDTH, white);

        // Affichage des champs de saisie
        for (int i = 0; i < 7; i++) {
            render_field(renderer, font, &fields[i]);
        }

        // Affichage des boutons
        render_button(renderer, font, &buttonValiderRect, "Valider");
        render_button(renderer, font, &buttonImageRect, "Image");
       // render_button(renderer, font, &buttonRetourRect, "Retour");

        SDL_RenderPresent(renderer);
    }
}

